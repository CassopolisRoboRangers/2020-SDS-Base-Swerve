        
        //Code to put in java playground for PID looping a drive results
        //based on certain criteria        
        
        //PID
        double kP = .1;
        double kI = .0;
        double kD = .0;
        
        //Drive variables
        double driveDistance = 20;
        double kWheelCircumference = Math.PI * 4;
        double targetRevs;
        double forward = 0;
        int encoder = 0;
        
        //PID calulation variables
        double error;
        double integral = 0, previous_error = 0, derivative = 0;
        
        //Setpoint
        targetRevs = (driveDistance / kWheelCircumference) * 13;
        
        //Print Headers
        System.out.println("Target");
        System.out.println(targetRevs);
        System.out.println();
        System.out.println();
        System.out.println("Enc" + "        " + "Error" + "                   " + "Forward" + "              " + "Integral" +                   "           " + "Derivative");
        
        //loop counter to represent time periods
        for(int x = 0; x < 22; x++)
        {
                    
                //positive drive distance / positive error
                //negative drive distance / negetive error
                if(driveDistance > 0)
                {
                    error = Math.abs(targetRevs) - Math.abs(encoder);
                }
                else
                {
                    error = -(Math.abs(targetRevs) - Math.abs(encoder));
                }

                //Calculate PID values
                integral += (error * .02); // Integral is increased by the error*time (which is .02 seconds using normal IterativeRobot)
                derivative = (error - previous_error) / .02; //Difference in error over last time period
                
                //Final motion result
                forward = (kP * error) + (kI * integral) + (kD * derivative);

                //Print results
                System.out.println(encoder + "     " + error + "     " + forward + "    " + integral + "   " + derivative);
  
                //increase encoder
                encoder += 1;
                
                //Save last error
                previous_error = error;
        }
        
        System.out.println("Hello Java");
